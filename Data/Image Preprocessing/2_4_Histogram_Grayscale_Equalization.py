# ==============================================================
# 0. 라이브러리 불러오기
# ==============================================================
import cv2
import numpy as np
import matplotlib.pylab as plt

# ==============================================================
# 1. 이미지 불러오기
# ==============================================================
# 1) 이미지 GrayScale로 읽기
img = cv2.imread('/media/hi/SK Gold P31/Capstone/GolfBall/9_2_COCO_FinalGolfBall_Crawling/images/train/golf ball in rough1_com.jpg', cv2.IMREAD_GRAYSCALE)
"""
img.shape : (image_height, image_width)
img : [[ 74  74  76 ... 180 171 166], [ 74  75  76 ... 178 166 160], [ 77  77  77 ... 175 162 155], ..., [193 194 198 ... 130 130 132], [191 190 194 ... 110 112 117], [191 190 191 ...  97 101 107]]
"""
img_height, img_width = img.shape[:2]

# ==============================================================
# 2. 이미지 정보 계산 + 시각화
# ==============================================================
# 1way) 직접 Histogram Equalization = 평탄화
# (1) Histogram 계산
hist = cv2.calcHist([img], [0], None, [256], [0, 256])
"""
hist.shape : (256, 1)
hist : [[  28.], [  37.], [  47.], [  49.], [  74.], [  81.], [  97.], [  98.], [ 127.], [ 175.], [ 165.], [ 179.], [ 183.], [ 204.], [ 216.], [ 220.], [ 260.], [ 310.], [ 291.], [ 315.], [ 282.], [ 351.], [ 374.], [ 398.], [ 427.], [ 399.], [ 427.], [ 450.], [ 524.], [ 575.], [ 632.], [ 638.], [ 700.], [ 661.], [ 724.], [ 691.], [ 737.], [ 804.], [ 804.], [ 823.], [ 914.], [ 929.], [ 973.], [ 891.], [ 939.], [ 966.], [ 881.], [ 969.], [ 922.], [ 937.], [ 982.], [ 999.], [ 953.], [ 912.], [ 937.], [ 919.], [ 964.], [ 953.], [ 964.], [1051.], [ 962.], [ 935.], [ 978.], [ 913.], [ 945.], [ 967.], [ 903.], [ 949.], [ 965.], [ 955.], [ 974.], [ 982.], [ 926.], [ 996.], [1001.], [ 963.], [ 947.], [ 961.], [ 933.], [1010.], [1003.], [ 975.], [1026.], [ 961.], [1017.], [ 903.], [ 945.], [ 960.], [ 887.], [ 972.], [ 950.], [ 953.], [ 947.], [1003.], [1029.], [ 948.], [1014.], [1072.], [1129.], [1094.]]
"""
# (2) 누적 Histogram
cdf = hist.cumsum()
"""
hist.shape : (256)
hist : [2.8000e+01 6.5000e+01 1.1200e+02 1.6100e+02 2.3500e+02 3.1600e+02, 4.1300e+02 5.1100e+02 6.3800e+02 8.1300e+02 9.7800e+02 1.1570e+03, 1.3400e+03 1.5440e+03 1.7600e+03 1.9800e+03 2.2400e+03 2.5500e+03, 2.8410e+03 3.1560e+03 3.4380e+03 3.7890e+03 4.1630e+03
"""
# (3) 0(zero)인 값을 NaN으로 변환
cdf_m = np.ma.masked_equal(cdf, 0)
"""
cdf_m.shape : (256)
cdf_m : [2.8000e+01 6.5000e+01 1.1200e+02 1.6100e+02 2.3500e+02 3.1600e+02, 4.1300e+02 5.1100e+02 6.3800e+02 8.1300e+02 9.7800e+02 1.1570e+03, 1.3400e+03 1.5440e+03 1.7600e+03 1.9800e+03 2.2400e+03 2.5500e+03, 2.8410e+03 3.1560e+03 3.4380e+03 3.7890e+03 4.1630e+03 4.5610e+03, 4.9880e+03 5.3870e+03 5.8140e+03 6.2640e+03 6.7880e+03 7.3630e+03, 7.9950e+03 8.6330e+03 9.3330e+03 9.9940e+03 1.0718e+04 1.1409e+04, 1.2146e+04 1.2950e+04 1.3754e+04 1.4577e+04 1.5491e+04 1.6420e+04, 1.7393e+04 1.8284e+04 1.9223e+04 2.0189e+04 2.1070e+04 2.2039e+04, 2.2961e+04 2.3898e+04 2.4880e+04 2.5879e+04 2.6832e+04 2.7744e+04, 2.8681e+04 2.9600e+04 3.0564e+04 3.1517e+04 3.2481e+04 3.3532e+04, 3.4494e+04 3.5429e+04 3.6407e+04 3.7320e+04 3.8265e+04 3.9232e+04, 4.0135e+04 4.1084e+04 4.2049e+04 4.3004e+04 4.3978e+04 4.4960e+04, 4.5886e+04 4.6882e+04 4.7883e+04 4.8846e+04 4.9793e+04 5.0754e+04, 5.1687e+04 5.2697e+04 5.3700e+04 5.4675e+04 5.5701e+04 5.6662e+04, 5.7679e+04 5.8582e+04 5.9527e+04 6.0487e+04 6.1374e+04 6.2346e+04, 6.3296e+04 6.4249e+04 6.5196e+04 6.6199e+04 6.7228e+04 6.8176e+04, 6.9190e+04 7.0262e+04 7.1391e+04 7.2485e+04]
"""
# (4) Equalize 누적 Histogram 계산
cdf_m = (cdf_m - cdf_m.min()) * 255 / (img_height * img_width)
# cdf_m : 누적 Histogram이므로 마지막 원소는 결국 img_height * img_width과 같은 값
# cdf_m.min() : 누적 Histogram이므로 첫 번째 원소가 가장 작은 0 초과의 값
# -> cdf_m는 0 ~ 255 사이의 범위에 존재
# 누적 개수 기준으로 픽셀값 매칭 : 기존 Histogram이 픽셀 0 ~ 255 중에서 53과 101에 반반씩 몰려있으면, 기존 픽셀값 0 ~ 53은 변환된 픽셀값이 0, 기존 픽셀값 53 ~ 100은 변환된 픽셀값이 127, 기존 픽셀값 101 ~ 255는 변환된 픽셀값이 255로 매핑됨
"""
cdf_m.shape : (256)
cdf_m : [0.0 0.056837349397590366 0.12903614457831325 0.20430722891566264, 0.3179819277108434 0.44240963855421683 0.5914156626506024, 0.7419578313253011 0.9370481927710844 1.2058734939759035, 1.4593373493975903 1.7343072289156627 2.0154216867469876, 2.3287951807228917 2.660602409638554 2.9985542168674697, 3.3979518072289157 3.874156626506024 4.321174698795181 4.805060240963855, 5.238253012048193 5.777439759036144 6.351957831325302 6.963343373493975, 7.619277108433735 8.232198795180723 8.888132530120483 9.579397590361447, 10.38433734939759 11.267620481927711 12.238463855421687, 13.218524096385542 14.29382530120482 15.309216867469878, 16.421385542168675 17.482861445783133 18.615 19.850060240963856, 21.08512048192771 22.349367469879518 23.75340361445783 25.180481927710844, 26.67515060240964 28.043855421686747 29.48629518072289 30.970210843373494, 32.32355421686747 33.81207831325301 35.22840361445783 36.66777108433735, 38.176265060240965 39.7108734939759 41.17481927710843 42.57578313253012, 44.01515060240964 45.42686746987952 46.90771084337349 48.371656626506024, 49.8525 51.466987951807226 52.944759036144575 54.38105421686747, 55.883403614457826 57.28590361445783 58.73756024096386 60.22301204819277, 61.61015060240964 63.067951807228916 64.55033132530122 66.01734939759035, 67.51355421686746 69.0220481927711 70.44451807228916 71.97451807228916, 73.51219879518072 74.99150602409638 76.44623493975904 77.92246987951808, 79.35569277108434 80.90719879518072 82.44795180722892 83.94569277108434, 85.52177710843374 86.99801204819278 88.56027108433734 89.94740963855422, 91.39906626506024 92.87376506024096 94.23632530120481 95.7294578313253, 97.18879518072289 98.65274096385542 100.10746987951808 101.64822289156626, 103.2289156626506 104.68518072289157 106.2428313253012 107.88957831325301, 109.62388554216867 111.30442771084338]
"""
# (5) NaN을 다시 0으로 변환
cdf = np.ma.filled(cdf_m, 0).astype('uint8')
"""
cdf.shape : (256)
cdf : [  0   0   0   0   0   0   0   0   0   1   1   1   2   2   2   2   3   3,   4   4   5   5   6   6   7   8   8   9  10  11  12  13  14  15  16  17,  18  19  21  22  23  25  26  28  29  30  32  33  35  36  38  39  41  42,  44  45  46  48  49  51  52  54  55 
"""
# (6) Histogram을 픽셀로 맵핑 (img의 픽셀값을 cdf의 idx로 사용)
img2 = cdf[img]
"""
img2.shape : (image_height, image_height)
img2 : [[ 73  73  76 ... 210 201 195], [ 73  74  76 ... 208 195 188], [ 77  77  77 ... 205 190 181], ..., [223 224 229 ... 151 151 153], [221 220 224 ... 127 129 135], [221 220 221 ... 107 114 123]]
"""

# 2way) OpenCV Histogram Equalize = 평탄화
img3 = cv2.equalizeHist(img)

# 3) Equalize 결과 Histogram 계산
hist2 = cv2.calcHist([img2], [0], None, [256], [0, 256])
hist3 = cv2.calcHist([img3], [0], None, [256], [0, 256])

# 4) Histogram 시각화
cv2.imshow('Before', img)
cv2.imshow('Manual', img2)
cv2.imshow('cv2.equalizeHist()', img3)
hists = {'Before':hist, 'Manual':hist2, 'cv2.equalizeHist()':hist3}
for i, (k, v) in enumerate(hists.items()):
    plt.subplot(1,3,i+1)
    plt.title(k)
    plt.plot(v)
plt.show()